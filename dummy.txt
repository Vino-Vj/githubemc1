"use client";
import { useState, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import Image from 'next/image';

interface SocialLinks {
  linkedin: string;
  github: string;
  twitter: string;
  dribbble: string;
  behance: string;
  youtube: string;
}

interface Project {
  title: string;
  description: string;
  technologies: string;
  links: {
    github: string;
    live: string;
    case_study: string;
  };
  image: string;
}

interface FormData {
  // Basic Information
  fullName: string;
  profilePicture: string;
  tagline: string;
  contact: {
    email: string;
    phone: string;
    location: string;
  };

  // Education
  education: {
    institution: string;
    degree: string;
    coursework: string;
    graduationDate: string;
  }[];

  // Skills
  skills: {
    technical: string[];
    soft: string[];
    certifications: string[];
  };

  // Experience
  experience: {
    type: 'internship' | 'freelance' | 'part-time';
    company: string;
    role: string;
    description: string;
    duration: string;
  }[];

  // Projects
  projects: Project[];

  // Achievements
  achievements: {
    awards: string[];
    competitions: string[];
    certifications: string[];
  };

  // About
  about: {
    bio: string;
    interests: string[];
    goals: {
      shortTerm: string;
      longTerm: string;
    };
  };

  // Social Links
  socialLinks: SocialLinks;
}

export default function PortfolioForm() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <PortfolioFormContent />
    </Suspense>
  );
}

function PortfolioFormContent() {
  const searchParams = useSearchParams();
  const templateId = searchParams.get('template');

  const [formData, setFormData] = useState<FormData>({
    fullName: '',
    profilePicture: '',
    tagline: '',
    contact: {
      email: '',
      phone: '',
      location: '',
    },
    education: [{
      institution: '',
      degree: '',
      coursework: '',
      graduationDate: '',
    }],
    skills: {
      technical: [],
      soft: [],
      certifications: [],
    },
    experience: [{
      type: 'internship',
      company: '',
      role: '',
      description: '',
      duration: '',
    }],
    projects: [{
      title: '',
      description: '',
      technologies: '',
      links: {
        github: '',
        live: '',
        case_study: ''
      },
      image: ''
    }],
    achievements: {
      awards: [],
      competitions: [],
      certifications: [],
    },
    about: {
      bio: '',
      interests: [],
      goals: {
        shortTerm: '',
        longTerm: '',
      },
    },
    socialLinks: {
      linkedin: '',
      github: '',
      twitter: '',
      dribbble: '',
      behance: '',
      youtube: '',
    },
  });

  const [currentStep, setCurrentStep] = useState(1);
  const totalSteps = 8;

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Template ID:', templateId);
    console.log('Form Data:', formData);
  };

  const handleChange = (section: string, field: string, value: any) => {
    setFormData(prev => {
      const sectionData = prev[section as keyof FormData];
      if (typeof sectionData === 'object' && sectionData !== null) {
        return {
          ...prev,
          [section]: {
            ...sectionData,
            [field]: value
          }
        };
      }
      // Handle non-nested fields
      return {
        ...prev,
        [section]: value
      };
    });
  };

  const handleArrayChange = (section: string, field: string, index: number, value: any) => {
    setFormData(prev => {
      const array = [...(prev[section as keyof FormData] as any[])];
      array[index] = { ...array[index], [field]: value };
      return { ...prev, [section]: array };
    });
  };

  const addArrayItem = (section: string, template: any) => {
    setFormData(prev => ({
      ...prev,
      [section]: [...(prev[section as keyof FormData] as any[]), { ...template }]
    }));
  };

  const removeArrayItem = (section: string, index: number) => {
    setFormData(prev => ({
      ...prev,
      [section]: (prev[section as keyof FormData] as any[]).filter((_, i) => i !== index)
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-900 to-gray-800 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-4xl mx-auto">
        <div className="bg-white/10 backdrop-blur-lg rounded-lg shadow-xl p-8">
          <h2 className="text-3xl font-bold text-center text-white mb-8">
            Create Your Portfolio
          </h2>

          {/* Progress Bar */}
          <div className="w-full bg-gray-700 rounded-full h-2.5 mb-8">
            <div 
              className="bg-blue-600 h-2.5 rounded-full transition-all duration-300"
              style={{ width: `${(currentStep / totalSteps) * 100}%` }}
            ></div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-8">
            {/* Step 1: Basic Information */}
            {currentStep === 1 && (
              <div className="space-y-6">
                <h3 className="text-2xl font-semibold text-white">Basic Information</h3>
                
                <div className="grid grid-cols-1 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Full Name
                    </label>
                    <input
                      type="text"
                      value={formData.fullName}
                      onChange={(e) => handleChange('fullName', '', e.target.value)}
                      className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Profile Picture
                    </label>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => {
                        if (e.target.files?.[0]) {
                          // Handle file upload logic here
                        }
                      }}
                      className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                    />
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Tagline
                    </label>
                    <input
                      type="text"
                      value={formData.tagline}
                      onChange={(e) => handleChange('tagline', '', e.target.value)}
                      placeholder="e.g., 'Passionate Full-Stack Developer'"
                      className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>

                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Email
                      </label>
                      <input
                        type="email"
                        value={formData.contact.email}
                        onChange={(e) => handleChange('contact', 'email', e.target.value)}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        required
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Phone (Optional)
                      </label>
                      <input
                        type="tel"
                        value={formData.contact.phone}
                        onChange={(e) => handleChange('contact', 'phone', e.target.value)}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>

                    <div className="sm:col-span-2">
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Location
                      </label>
                      <input
                        type="text"
                        value={formData.contact.location}
                        onChange={(e) => handleChange('contact', 'location', e.target.value)}
                        placeholder="e.g., 'San Francisco, CA' or 'Remote'"
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 2: Education */}
            {currentStep === 2 && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-2xl font-semibold text-white">Education</h3>
                  <button
                    type="button"
                    onClick={() => addArrayItem('education', {
                      institution: '',
                      degree: '',
                      coursework: '',
                      graduationDate: '',
                    })}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                  >
                    Add Education
                  </button>
                </div>

                {formData.education.map((edu, index) => (
                  <div key={index} className="space-y-4 bg-gray-800/50 p-6 rounded-lg relative">
                    <button
                      type="button"
                      onClick={() => removeArrayItem('education', index)}
                      className="absolute top-4 right-4 text-gray-400 hover:text-red-500"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Institution Name
                        </label>
                        <input
                          type="text"
                          value={edu.institution}
                          onChange={(e) => handleArrayChange('education', 'institution', index, e.target.value)}
                          placeholder="e.g., 'University of California, Berkeley'"
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Degree
                        </label>
                        <input
                          type="text"
                          value={edu.degree}
                          onChange={(e) => handleArrayChange('education', 'degree', index, e.target.value)}
                          placeholder="e.g., 'Bachelor of Science in Computer Science'"
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Relevant Coursework
                        </label>
                        <textarea
                          value={edu.coursework}
                          onChange={(e) => handleArrayChange('education', 'coursework', index, e.target.value)}
                          placeholder="List relevant courses, separated by commas"
                          rows={3}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Graduation Date
                        </label>
                        <input
                          type="month"
                          value={edu.graduationDate}
                          onChange={(e) => handleArrayChange('education', 'graduationDate', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Step 3: Skills */}
            {currentStep === 3 && (
              <div className="space-y-6">
                <h3 className="text-2xl font-semibold text-white">Skills</h3>

                <div className="grid grid-cols-1 gap-6">
                  {/* Technical Skills */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Technical Skills
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add a technical skill and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              skills: {
                                ...prev.skills,
                                technical: [...prev.skills.technical, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.skills.technical.map((skill, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-blue-600/30 text-blue-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {skill}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  skills: {
                                    ...prev.skills,
                                    technical: prev.skills.technical.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-blue-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Soft Skills */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Soft Skills
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add a soft skill and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              skills: {
                                ...prev.skills,
                                soft: [...prev.skills.soft, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.skills.soft.map((skill, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-purple-600/30 text-purple-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {skill}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  skills: {
                                    ...prev.skills,
                                    soft: prev.skills.soft.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-purple-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Certifications */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Certifications
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add a certification and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              skills: {
                                ...prev.skills,
                                certifications: [...prev.skills.certifications, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.skills.certifications.map((cert, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-green-600/30 text-green-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {cert}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  skills: {
                                    ...prev.skills,
                                    certifications: prev.skills.certifications.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-green-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 4: Experience */}
            {currentStep === 4 && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-2xl font-semibold text-white">Experience</h3>
                  <button
                    type="button"
                    onClick={() => addArrayItem('experience', {
                      type: 'internship',
                      company: '',
                      role: '',
                      description: '',
                      duration: '',
                    })}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                  >
                    Add Experience
                  </button>
                </div>

                {formData.experience.map((exp, index) => (
                  <div key={index} className="space-y-4 bg-gray-800/50 p-6 rounded-lg relative">
                    <button
                      type="button"
                      onClick={() => removeArrayItem('experience', index)}
                      className="absolute top-4 right-4 text-gray-400 hover:text-red-500"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Type
                        </label>
                        <select
                          value={exp.type}
                          onChange={(e) => handleArrayChange('experience', 'type', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        >
                          <option value="internship">Internship</option>
                          <option value="freelance">Freelance</option>
                          <option value="part-time">Part-time</option>
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Company/Organization
                        </label>
                        <input
                          type="text"
                          value={exp.company}
                          onChange={(e) => handleArrayChange('experience', 'company', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Role
                        </label>
                        <input
                          type="text"
                          value={exp.role}
                          onChange={(e) => handleArrayChange('experience', 'role', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Duration
                        </label>
                        <input
                          type="text"
                          value={exp.duration}
                          onChange={(e) => handleArrayChange('experience', 'duration', index, e.target.value)}
                          placeholder="e.g., 'Jun 2023 - Present'"
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Description
                        </label>
                        <textarea
                          value={exp.description}
                          onChange={(e) => handleArrayChange('experience', 'description', index, e.target.value)}
                          rows={4}
                          placeholder="Describe your responsibilities and achievements"
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Step 5: Projects */}
            {currentStep === 5 && (
              <div className="space-y-6">
                <div className="flex justify-between items-center">
                  <h3 className="text-2xl font-semibold text-white">Projects</h3>
                  <button
                    type="button"
                    onClick={() => addArrayItem('projects', {
                      title: '',
                      description: '',
                      technologies: '',
                      links: {
                        github: '',
                        live: '',
                        case_study: ''
                      },
                      image: ''
                    })}
                    className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors"
                  >
                    Add Project
                  </button>
                </div>

                {formData.projects.map((project, index) => (
                  <div key={index} className="space-y-4 bg-gray-800/50 p-6 rounded-lg relative">
                    <button
                      type="button"
                      onClick={() => removeArrayItem('projects', index)}
                      className="absolute top-4 right-4 text-gray-400 hover:text-red-500"
                    >
                      <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                      </svg>
                    </button>

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Project Title
                        </label>
                        <input
                          type="text"
                          value={project.title}
                          onChange={(e) => handleArrayChange('projects', 'title', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Description
                        </label>
                        <textarea
                          value={project.description}
                          onChange={(e) => handleArrayChange('projects', 'description', index, e.target.value)}
                          rows={4}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div className="sm:col-span-2">
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Technologies Used
                        </label>
                        <input
                          type="text"
                          value={project.technologies}
                          onChange={(e) => handleArrayChange('projects', 'technologies', index, e.target.value)}
                          placeholder="e.g., 'React, Node.js, MongoDB'"
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                          required
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          GitHub Repository
                        </label>
                        <input
                          type="url"
                          value={project.links.github}
                          onChange={(e) => handleArrayChange('projects', 'links.github', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Live Demo
                        </label>
                        <input
                          type="url"
                          value={project.links.live}
                          onChange={(e) => handleArrayChange('projects', 'links.live', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Case Study
                        </label>
                        <input
                          type="url"
                          value={project.links.case_study}
                          onChange={(e) => handleArrayChange('projects', 'links.case_study', index, e.target.value)}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Project Image
                        </label>
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            if (e.target.files?.[0]) {
                              // Handle file upload logic here
                              handleArrayChange('projects', 'image', index, URL.createObjectURL(e.target.files[0]));
                            }
                          }}
                          className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                        />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            )}

            {/* Step 6: Achievements */}
            {currentStep === 6 && (
              <div className="space-y-6">
                <h3 className="text-2xl font-semibold text-white">Achievements</h3>

                <div className="grid grid-cols-1 gap-6">
                  {/* Awards */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Awards
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add an award and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              achievements: {
                                ...prev.achievements,
                                awards: [...prev.achievements.awards, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.achievements.awards.map((award, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-yellow-600/30 text-yellow-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {award}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  achievements: {
                                    ...prev.achievements,
                                    awards: prev.achievements.awards.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-yellow-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Competitions */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Competitions
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add a competition and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              achievements: {
                                ...prev.achievements,
                                competitions: [...prev.achievements.competitions, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.achievements.competitions.map((competition, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-orange-600/30 text-orange-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {competition}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  achievements: {
                                    ...prev.achievements,
                                    competitions: prev.achievements.competitions.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-orange-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Achievement Certifications */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Notable Certifications
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add a certification and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              achievements: {
                                ...prev.achievements,
                                certifications: [...prev.achievements.certifications, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.achievements.certifications.map((cert, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-pink-600/30 text-pink-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {cert}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  achievements: {
                                    ...prev.achievements,
                                    certifications: prev.achievements.certifications.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-pink-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 7: About */}
            {currentStep === 7 && (
              <div className="space-y-6">
                <h3 className="text-2xl font-semibold text-white">About You</h3>

                <div className="grid grid-cols-1 gap-6">
                  {/* Personal Bio */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Personal Bio
                    </label>
                    <textarea
                      value={formData.about.bio}
                      onChange={(e) => handleChange('about', 'bio', e.target.value)}
                      rows={4}
                      placeholder="Tell us about your background, interests, and what drives you..."
                      className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      required
                    />
                  </div>

                  {/* Interests/Hobbies */}
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Interests & Hobbies
                    </label>
                    <div className="space-y-2">
                      <input
                        type="text"
                        placeholder="Add an interest/hobby and press Enter"
                        onKeyDown={(e) => {
                          if (e.key === 'Enter' && e.currentTarget.value) {
                            e.preventDefault();
                            setFormData(prev => ({
                              ...prev,
                              about: {
                                ...prev.about,
                                interests: [...prev.about.interests, e.currentTarget.value]
                              }
                            }));
                            e.currentTarget.value = '';
                          }
                        }}
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                      <div className="flex flex-wrap gap-2">
                        {formData.about.interests.map((interest, index) => (
                          <span
                            key={index}
                            className="px-3 py-1 bg-indigo-600/30 text-indigo-200 rounded-full text-sm flex items-center gap-2"
                          >
                            {interest}
                            <button
                              type="button"
                              onClick={() => {
                                setFormData(prev => ({
                                  ...prev,
                                  about: {
                                    ...prev.about,
                                    interests: prev.about.interests.filter((_, i) => i !== index)
                                  }
                                }));
                              }}
                              className="text-indigo-200 hover:text-white"
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>

                  {/* Career Goals */}
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Short-term Goals
                      </label>
                      <textarea
                        value={formData.about.goals.shortTerm}
                        onChange={(e) => {
                          setFormData(prev => ({
                            ...prev,
                            about: {
                              ...prev.about,
                              goals: {
                                ...prev.about.goals,
                                shortTerm: e.target.value
                              }
                            }
                          }));
                        }}
                        rows={3}
                        placeholder="What do you want to achieve in the next 1-2 years?"
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Long-term Goals
                      </label>
                      <textarea
                        value={formData.about.goals.longTerm}
                        onChange={(e) => {
                          setFormData(prev => ({
                            ...prev,
                            about: {
                              ...prev.about,
                              goals: {
                                ...prev.about.goals,
                                longTerm: e.target.value
                              }
                            }
                          }));
                        }}
                        rows={3}
                        placeholder="Where do you see yourself in 5+ years?"
                        className="w-full px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Step 8: Social Links */}
            {currentStep === 8 && (
              <div className="space-y-6">
                <h3 className="text-2xl font-semibold text-white">Social Links</h3>

                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      LinkedIn Profile
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                        <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M19 3a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h14m-.5 15.5v-5.3a3.26 3.26 0 0 0-3.26-3.26c-.85 0-1.84.52-2.32 1.3v-1.11h-2.79v8.37h2.79v-4.93c0-.77.62-1.4 1.39-1.4a1.4 1.4 0 0 1 1.4 1.4v4.93h2.79M6.88 8.56a1.68 1.68 0 0 0 1.68-1.68c0-.93-.75-1.69-1.68-1.69a1.68 1.68 0 0 0-1.68 1.69c0 .93.76 1.68 1.69 1.68m1.39 9.94v-8.37H5.5v8.37h2.77z" />
                        </svg>
                      </span>
                      <input
                        type="url"
                        value={formData.socialLinks.linkedin}
                        onChange={(e) => handleChange('socialLinks', 'linkedin', e.target.value)}
                        placeholder="https://linkedin.com/in/username"
                        className="w-full pl-10 px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      GitHub Profile
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                        <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2z" />
                        </svg>
                      </span>
                      <input
                        type="url"
                        value={formData.socialLinks.github}
                        onChange={(e) => handleChange('socialLinks', 'github', e.target.value)}
                        placeholder="https://github.com/username"
                        className="w-full pl-10 px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Twitter Profile
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                        <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M22 7h-7V2H9v5H2v15h20V7zM9 13.5c0 .8-.7 1.5-1.5 1.5H5v2H3V7h4.5C8.3 7 9 7.7 9 8.5v5zM7.5 9H5v4h2.5c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5zm9.5 5.5c0 .8-.7 1.5-1.5 1.5h-2v2h-2V7h4c.8 0 1.5.7 1.5 1.5v6zm-2-4H15v4h2c.8 0 1.5-.7 1.5-1.5v-1c0-.8-.7-1.5-1.5-1.5z" />
                        </svg>
                      </span>
                      <input
                        type="url"
                        value={formData.socialLinks.twitter}
                        onChange={(e) => handleChange('socialLinks', 'twitter', e.target.value)}
                        placeholder="https://twitter.com/username"
                        className="w-full pl-10 px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Dribbble Profile
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                        <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M10 15l5.19-3L10 9v6m11.56-7.83c.13.47.22 1.1.28 1.9.07.8.1 1.49.1 2.09L22 12c0 2.19-.16 3.8-.44 4.83-.25.9-.83 1.48-1.73 1.73-.47.13-1.33.22-2.65.28-1.3.07-2.49.1-3.59.1L12 19c-4.19 0-6.8-.16-7.83-.44-.9-.25-1.48-.83-1.73-1.73-.13-.47-.22-1.1-.28-1.9-.07-.8-.1-1.49-.1-2.09L2 12c0-2.19.16-3.8.44-4.83.25-.9.83-1.48 1.73-1.73.47-.13 1.33-.22 2.65-.28 1.3-.07 2.49-.1 3.59-.1L12 5c4.19 0 6.8.16 7.83.44.9.25 1.48.83 1.73 1.73z" />
                        </svg>
                      </span>
                      <input
                        type="url"
                        value={formData.socialLinks.dribbble}
                        onChange={(e) => handleChange('socialLinks', 'dribbble', e.target.value)}
                        placeholder="https://dribbble.com/username"
                        className="w-full pl-10 px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      Behance Profile
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                        <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M22.46 6c-.77.35-1.6.58-2.46.69.88-.53 1.56-1.37 1.88-2.38-.83.5-1.75.85-2.72 1.05C18.37 4.5 17.26 4 16 4c-2.35 0-4.27 1.92-4.27 4.29 0 .34.04.67.11.98C8.28 9.09 5.11 7.38 3 4.79c-.37.63-.58 1.37-.58 2.15 0 1.49.75 2.81 1.91 3.56-.71 0-1.37-.2-1.95-.5v.03c0 2.08 1.48 3.82 3.44 4.21a4.22 4.22 0 0 1-1.93.07 4.28 4.28 0 0 0 4 2.98 8.521 8.521 0 0 1-5.33 1.84c-.34 0-.68-.02-1.02-.06C3.44 20.29 5.7 21 8.12 21 16 21 20.33 14.46 20.33 8.79c0-.19 0-.37-.01-.56.84-.6 1.56-1.36 2.14-2.23z" />
                        </svg>
                      </span>
                      <input
                        type="url"
                        value={formData.socialLinks.behance}
                        onChange={(e) => handleChange('socialLinks', 'behance', e.target.value)}
                        placeholder="https://behance.net/username"
                        className="w-full pl-10 px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-gray-300 mb-2">
                      YouTube Channel
                    </label>
                    <div className="relative">
                      <span className="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-400">
                        <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                          <path d="M12 2A10 10 0 0 0 2 12c0 4.42 2.87 8.17 6.84 9.5.5.08.66-.23.66-.5v-1.69c-2.77.6-3.36-1.34-3.36-1.34-.46-1.16-1.11-1.47-1.11-1.47-.91-.62.07-.6.07-.6 1 .07 1.53 1.03 1.53 1.03.87 1.52 2.34 1.07 2.91.83.09-.65.35-1.09.63-1.34-2.22-.25-4.55-1.11-4.55-4.92 0-1.11.38-2 1.03-2.71-.1-.25-.45-1.29.1-2.64 0 0 .84-.27 2.75 1.02.79-.22 1.65-.33 2.5-.33.85 0 1.71.11 2.5.33 1.91-1.29 2.75-1.02 2.75-1.02.55 1.35.2 2.39.1 2.64.65.71 1.03 1.6 1.03 2.71 0 3.82-2.34 4.66-4.57 4.91.36.31.69.92.69 1.85V21c0 .27.16.59.67.5C19.14 20.16 22 16.42 22 12A10 10 0 0 0 12 2z" />
                        </svg>
                      </span>
                      <input
                        type="url"
                        value={formData.socialLinks.youtube}
                        onChange={(e) => handleChange('socialLinks', 'youtube', e.target.value)}
                        placeholder="https://youtube.com/c/username"
                        className="w-full pl-10 px-4 py-2 rounded-lg bg-gray-800 text-white border border-gray-700 focus:border-blue-500 focus:ring-2 focus:ring-blue-500"
                      />
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Navigation Buttons */}
            <div className="flex justify-between pt-6">
              <button
                type="button"
                onClick={() => setCurrentStep(prev => Math.max(1, prev - 1))}
                className={`px-6 py-2 rounded-lg font-medium transition-colors ${
                  currentStep === 1
                    ? 'bg-gray-600 text-gray-400 cursor-not-allowed'
                    : 'bg-gray-700 text-white hover:bg-gray-600'
                }`}
                disabled={currentStep === 1}
              >
                Previous
              </button>

              <button
                type="button"
                onClick={() => {
                  if (currentStep === totalSteps) {
                    handleSubmit(new Event('submit') as any);
                  } else {
                    setCurrentStep(prev => Math.min(totalSteps, prev + 1));
                  }
                }}
                className="px-6 py-2 bg-blue-600 text-white rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                {currentStep === totalSteps ? 'Submit' : 'Next'}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
